#!python
import syft
import pickle
import sys
import os
import random
import numpy as np

sys.path.insert(0, os.path.abspath('..'))

from clint.arguments import Args
from clint.textui import puts, colored, indent

args = Args()

with indent(4, quote='>>>'):
    # puts(colored.red('Aruments passed in: ') + str(args.all))
    # puts(colored.red('Flags detected: ') + str(args.flags))
    # puts(colored.red('Files detected: ') + str(args.files))
    # puts(colored.red('NOT Files detected: ') + str(args.not_files))
    # puts(colored.red('Grouped Arguments: ') + str(dict(args.grouped)))

    command = str(args.all[0] if len(args.all) else '')
    puts(colored.blue('Command: ') + command)

    if(command == 'create_model'):

        model_name = str(dict(args.grouped)['-name'][0])
        inputs = int(dict(args.grouped)['-inputs'][0])
        outputs = int(dict(args.grouped)['-outputs'][0])

        model_path = dict(args.grouped)['-path'][0]

        diabetes_classifier = syft.nn.linear.LinearClassifier(desc=model_name,n_inputs=inputs,n_labels=outputs)

        f = open(model_path+model_name.replace(" ","_")+".pickle",'wb')
        pickle.dump(diabetes_classifier,f)
        f.close()

    elif(command == 'generate_keypair'):

        local_args = set(dict(args.grouped).keys())

        if('-encryption' in local_args):
            encryption = str(dict(args.grouped)['-encryption'][0])
        else:
            encryption = 'paillier' #default

        if('-keylen' in local_args):
            keylen = int(dict(args.grouped)['-keylen'][0]) # 1024
        else:
            keylen = 1024 #default

        folder_path = str(dict(args.grouped)['-path'][0])

        if(encryption == 'paillier'):
            from syft.he.paillier import KeyPair
            puts(colored.blue('Generating Keys...'))
            pubkey,prikey = KeyPair().generate(n_length=int(keylen))
            puts('DONE!')


            f = open(folder_path+"pubkey.pickle",'wb')
            pickle.dump(pubkey,f)
            f.close()

            f = open(folder_path+"prikey.pickle",'wb')
            pickle.dump(prikey,f)
            f.close()

        else:
            puts(colored.red('ENCRYPTION ALGORITHM NOT FOUND'))

    elif(command == 'encrypt_model'):

        model_path = str(dict(args.grouped)['-model'][0])
        pubkey_path = str(dict(args.grouped)['-pubkey'][0])
        output_path = str(dict(args.grouped)['-output'][0])

        f = open(model_path,'rb')
        model = pickle.load(f)
        f.close()

        f = open(pubkey_path,'rb')
        pubkey = pickle.load(f)
        f.close()

        e_model = model.encrypt(pubkey)

        f = open(output_path,'wb')
        pickle.dump(e_model,f)
        f.close()
    elif(command == 'generate_gradient'):

        # TODO: don't read whole input dataset every time

        local_args = set(dict(args.grouped).keys())

        def read_matrix(p):
            f = open(p,'r')
            text = f.readlines()
            f.close()

            matrix = list()
            for row in text:
                matrix.append(row.split(","))
            matrix = np.array(matrix).astype('float')
            return matrix

        model_path = dict(args.grouped)['-model'][0]
        input_data_path = dict(args.grouped)['-input_data'][0]
        target_data_path = dict(args.grouped)['-target_data'][0]
        gradient_path = dict(args.grouped)['-gradient'][0]

        if('-n_grads' in local_args):
            n = dict(args.grouped)['-n_grads'][0]
        else:
            n = 1

        puts(colored.blue('Model Path: ') + model_path)
        puts(colored.blue('Input Data Path: ') + input_data_path)
        puts(colored.blue('Output Data Path: ') + target_data_path)
        puts(colored.blue('Gradient Path: ') + gradient_path)

        input = read_matrix(input_data_path)
        target = read_matrix(target_data_path)

        f = open(model_path,'rb')
        model = pickle.load(f)
        f.close()

        print(input[0:5])
        print(target[0:5])

        grads = list()
        for _ in range(n):
            i = random.randint(0,len(input))
            grad = model.generate_gradient(input[i],target[i])
            grads.append(grad)

        grads = np.mean(grads,axis=1)[0]
        print(grads)

        f = open(gradient_path,'wb')
        pickle.dump(grads,f)
        f.close()

    else:
        usage = """
    Syft v0.1.0 - a library for Homomorphically Encrypted Deep Learning

    Usage: syft.py <command> [options]

    Commands:
        create_model        Initializes a new Linear model and saves it to disk
        generate_keypair    Generates a public and private Homomorphic Encryption Keys
        encrypt_model       Homomorphically Encrypts a model using a public key.
        generate_gradient   Trains an existing model on some data, producing a diff (gradient)

    Example:
        python bin/syft_cmd.py create_model -name DiabetesModel -inputs 10 -outputs 10 -path ./
        python bin/syft_cmd.py generate_keypair -path ./
        python bin/syft_cmd.py encrypt_model -model ./DiabetesModel.pickle -pubkey ./pubkey.pickle -output ./encrypted.pickle
        python bin/syft_cmd.py generate_gradient -model ./encrypted.pickle -input_data data/diabetes_input.csv -target_data data/diabetes_output.csv -gradient ./encrypted_gradient.pickle
    See more at: http://github.com/OpenMined/docs
        """
        puts(colored.red('COMMAND NOT FOUND'))
        puts(usage)


print
